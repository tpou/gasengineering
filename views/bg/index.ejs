<% include ../partials/header %> 


	<div class="container">
		<h1 class="text-center">Gas Formation Volume Factor Calculation - Bg</h1>
		
		<div class="row justify-content-between align-items-center mt-5">
			<div class="col-md-6 col-lg-5">
				<div class="form-row justify-content-center">
						<div class="col-3">
							<label><strong>Compound</strong></label>
						</div>
						<div class="col-3">
							<label><strong>Fraction</strong></label>
						</div>
				</div>
				<form id ="comp_temp">
					
					
					
					<form action="/bg" method="POST" name="comp">
						
						<div class="form-row justify-content-center"> <!-- 1 comp -->
							<div class = "col-3 was-validated">
								<select id="selectedcomp" name="selectedcomp" class="custom-select" required>
									<option value ="">Select...</option>
									
									<% var optarr = []; %>
									<% fluidprops.forEach(function(fluidprop){%>
									<%	optarr.push(fluidprop.abbreviation)%>
									<% })%>
									
									<% optarr.sort(); %>
									
									<% for(var i=0;i<optarr.length;i++){ %>
									 <option><%=optarr[i]%></option>
									<%}%>
									
									
								</select>
						
							</div>
							<div class="col-3 was-validated">
								<input id="frac_value" type="text" class="form-control" name="selectedfraction" placeholder="0" required>	
							</div>
							
							
						</div>
						
					</form>
					
					<div class="form-row pt-2 justify-content-center">
						<div class="col-3 text-center">
							<button id="btn_add" value="1" type="submit" class="btn btn-primary btn-block">Add</button>
						</div>
						<div class="col-3 ml-1">
							<button id="btn_remove" value="1" type="submit" class="btn btn-warning btn-block">Remove</button>
						</div>
		
						
					
					</div>
					
					
					
					
				</form>
				

			</div>

			<div class="col-md-8 col-lg-4 text-center">
				<form class="was-validated">
					<label class="mb-1"><strong>Pressure</strong></label>
					<input type="text" class="form-control mb-3" id="pressure" placeholder="1000 psi" style="text-align: center;" required>	
					<label><strong>Temperature</strong></label>
					<input type="text" class="form-control mb-3" id="temperature" placeholder="150 F" style="text-align:center;" required>

					<label class="mb-1"><strong>z Correlation</strong></label>
					<select class="custom-select mb-3" id="zcorr" style="text-align:center;" required>
								<option value ="">Select correlation...</option>
								<option>Kamyab-ANN10</option>
								<option>DranchukAbuKassem</option>
								<option>DranchukPurvisRobinson</option>
								<option>BeggsBrill</option>
								<option>HallYarborough</option>
								<option>Shell</option>
					</select>	
						

				</form>

            </div>

			
		</div>

		<div id ="divz" class="row justify-content-center align-items-center text-center">
		

			<div class="col-6" id="divz1">
				<div class="row justify-content-center align-items-center mb-2">
					<button id="btn_compute" type="submit" class="btn btn-outline-danger" >Calculate</button>
					
				</div>
				
				
				<label class="mb-1"><strong>Gas Compressibility - z</strong></label>
				<input type="number" class="form-control input-sm mb-3 text-danger" id="z_value" width="100" name="z_value" style="::placeholder{color:red}; text-align:center;" readonly>	

				<label class="mb-1"><strong>Gas Formation Volume Factor - Bg</strong></label>
				<input type="number" class="form-control mb-3 text-danger" id="bg_value" style="::placeholder {color:white}; text-align:center;" readonly>
		
			</div>
			
			<!--<div class="col-6" id="plot">-->
				
			<!--</div>-->

		</div>


	</div>
	
	<script type="text/javascript">
		
		
		btn = document.getElementById("btn_add");
		var comp_temp = document.getElementById("comp_temp");
		
		btn.addEventListener("click", function(){
				
			var number = document.getElementById("btn_add").value;
			
			// total frac mole less than or equal 1: 
			var comp_names_temp = [], comp_fractions_temp = [], sum_comp_fractions_temp =0;
			comp_selects_temp = document.getElementsByName("selectedcomp");
			fraction_selectes_temp = document.getElementsByName("selectedfraction");
			for(var i=0;i<comp_selects_temp.length;i++){
				comp_names_temp[i] = comp_selects_temp[i].value;
				comp_fractions_temp[i] = Number(fraction_selectes_temp[i].value);
				sum_comp_fractions_temp += comp_fractions_temp[i];
			}
			if (sum_comp_fractions_temp > 1) {
				alert("Total fraction moles is larger than 1.0")
			}
			
			// 
			
			for(i=0; i<number; i++){
				var newdiv = document.createElement("div");
				newdiv.setAttribute('class','form-row justify-content-center');
				var newdiv1 = document.createElement("div");
				newdiv1.setAttribute('class','col-3 was-validated');
				var newdiv2 = document.createElement("div");
				newdiv2.setAttribute('class','col-3 was-validated');
				newdiv.appendChild(newdiv1);
				newdiv.appendChild(newdiv2);
				
				var newselect = document.createElement("select");
				newselect.setAttribute('class','custom-select');
				newselect.setAttribute('id','selectedcomp');
				newselect.setAttribute('name','selectedcomp');
				newselect.setAttribute('onchange','alertMessage()');
				newselect.required = true;
				
				var opt1 = document.createElement("option");
				opt1.value = "";
				opt1.text = "Select..."
				newselect.appendChild(opt1)
				
				var optarr = [];
				<% fluidprops.forEach(function(fluidprop){ %>
					optarr.push("<%= fluidprop.abbreviation %>")
				<%})%>
				optarr.sort();
	
				
				for (var i=0;i<optarr.length;i++){
					var opt = document.createElement("option");
				
					opt.setAttribute('value',optarr[i]);
					opt.text = optarr[i];
					newselect.appendChild(opt);
				}	
					
				
			
				var newinput = document.createElement("input");
				newinput.setAttribute('class','form-control');
				newinput.placeholder = 0;
				newinput.setAttribute('name','selectedfraction');
				newinput.required = true;
				newdiv1.appendChild(newselect);
				newdiv2.appendChild(newinput);
				
				
				comp_temp.insertBefore(newdiv, comp_temp.childNodes[10])
				
			}
		})
		
		//Excute remove button
		
		btn_remove = document.getElementById("btn_remove");
		btn_remove.addEventListener("click", function(){
			
			comp_temp.removeChild(comp_temp.lastChild);
		})

		// Execute if C7+


		function alertMessage(){
		var comp_temp = document.getElementById("comp_temp");
		if(document.getElementById("comp_temp").lastElementChild.firstElementChild.firstElementChild.value== "C7+"){
			
			var newdiv = document.createElement("div");
			newdiv.setAttribute('class','form-row justify-content-center');
			
			var newdiv1 = document.createElement("div");
			newdiv1.setAttribute('class','col-3 was-validated');
			var newlabel = document.createElement("label");
			newlabel.innerHTML = 'C7+ MW:';
			newlabel.setAttribute('class','mt-2 ml-2');
			newdiv1.appendChild(newlabel);
			
			var newdiv2 = document.createElement("div");
			newdiv2.setAttribute('class','col-3 was-validated');
			var newinput = document.createElement("input");
			newinput.setAttribute('class','form-control');
			newinput.setAttribute('id','C7plusmolweight');
			newinput.setAttribute('name','C7plusmolweight');
			newinput.placeholder = 0;
			newinput.required = true;
			newdiv2.appendChild(newinput);
			

			
			newdiv.appendChild(newdiv1);
			newdiv.appendChild(newdiv2);
			
			comp_temp.insertBefore(newdiv, comp_temp.childNodes[10])
			
			}
		
		}
		
		
		// Execute compute button
		
		btn_cal = document.getElementById("btn_compute");
		btn_cal.addEventListener("click", function(){
			// format the div first:
			divz = document.getElementById("divz");
			divz1 = document.getElementById("divz1");
			divz1.setAttribute('class','col-4');
			
			newdiv = document.createElement("div");
			newdiv.setAttribute('class','col-8');
			newdiv.setAttribute('id','plot');
			divz.appendChild(newdiv);
				
			var comp_names = [];
			var comp_fractions = [];
			var sum_fracs = 0;
			comp_selects = document.getElementsByName("selectedcomp");
			fraction_selectes = document.getElementsByName("selectedfraction");
			for(var i=0;i<comp_selects.length;i++){
				comp_names[i] = comp_selects[i].value;
				comp_fractions[i] = Number(fraction_selectes[i].value);
				sum_fracs += comp_fractions[i];
				
				if(sum_fracs >1){
					alert("Total mole fractions must <=1.0");
				}
			}
			// get fluid thermo from db
			
			var fluid_abbr = [], fluid_mw =[], fluid_crit_pres =[], fluid_crit_temp =[];
			
			<% fluidprops.forEach(function(fluidprop){%>
				fluid_abbr.push("<%= fluidprop.abbreviation %>");
				fluid_mw.push("<%= fluidprop.molecular_weight %>");
				fluid_crit_pres.push("<%= fluidprop.critical_pressure %>");
				fluid_crit_temp.push("<%= fluidprop.critical_temperature %>")
			<%})%>
			
			// map selected fluid thermo from db
			var comp_mw =[], comp_crit_pres=[],	comp_crit_temp=[];
				
			for(var i=0;i<comp_names.length;i++){
				var idx = fluid_abbr.indexOf(comp_names[i]);
				comp_mw[i] = fluid_mw[idx];
				comp_crit_pres[i] = fluid_crit_pres[idx];
				comp_crit_temp[i] = Number(fluid_crit_temp[idx]) + 459.67; // convert to R
			}
			
			// Ppc Tpc
			var sum_Ppc = 0, sum_Tpc = 0;
			for(var i=0;i<comp_fractions.length;i++){
				sum_Ppc += comp_fractions[i]*comp_crit_pres[i];
				sum_Tpc += comp_fractions[i]*comp_crit_temp[i];
			}
			
			// Ppr Tpr
			
			pres = document.getElementById("pressure").value;
			temp = document.getElementById("temperature").value;
			
			Ppr = (pres / sum_Ppc).toFixed(4);
			Tpr = ((Number(temp) + 459.67) / sum_Tpc).toFixed(4);
			
			
			// zCorelation
			zcorr_selected = document.getElementById("zcorr").value;
			
			
			if (zcorr_selected == "Kamyab-ANN10"){
				z_computed = z_Kamyab(Ppr, Tpr);
				
			}else if (zcorr_selected=="DranchukAbuKassem"){
				z_computed = z_DranchukAbuKassem(Ppr, Tpr);
				
			} else if(zcorr_selected=="BeggsBrill"){
				z_computed = z_BeggsBrill(Ppr, Tpr);
				
			} else if(zcorr_selected=="HallYarborough"){
				z_computed = z_HallYarborough(Ppr, Tpr);
				
			} else if(zcorr_selected=="Shell"){
				z_computed = z_Shell(Ppr, Tpr);
				
			} else {
				z_computed = z_DranchukPurvisRobinson(Ppr, Tpr);
				
			}
			
			// switch(zcorr_selected){
			// 	case "Kamyab-ANN10":
			// 		z_computed = z_Kamyab(Ppr, Tpr);
			// 	case "DranchukAbuKassem":
			// 		z_computed = z_DranchukAbuKassem(Ppr, Tpr);
			// 	case "BeggsBrill":
			// 		z_computed = z_BeggsBrill(Ppr, Tpr);
			// 	case "HallYarborough":
			// 		z_computed = z_HallYarborough(Ppr, Tpr);
			// 	case "Shell":
			// 		z_computed = z_Shell(Ppr, Tpr);
			// 	// case "DranchukPurvisRobinson":
			// 	// 	z_computed = z_DranchukPurvisRobinson(Ppr, Tpr);
			// } 
					
					
			z = document.getElementById("z_value");
			z.setAttribute('placeholder',z_computed);
			bg_computed = (0.02827*z_computed*(Number(temp) + 459.67)/pres).toFixed(4);
			bg = document.getElementById("bg_value");
			bg.setAttribute('placeholder',bg_computed);
			
			function z_Kamyab(Ppr, Tpr) {
				Ppr_min = 0
			    Ppr_max = 30
			    Tpr_min = 1
			    Tpr_max = 3
			    Z_min = 0.25194
			    Z_max = 2.66
				wb1 = [[2.2458, -2.2493, -3.7801],[3.4663, 8.1167, -14.9512],[5.0509, -1.8244, 3.5017],
                      [6.1185, -0.2045, 0.3179], [1.3366, 4.9303, 2.2153],[-2.8652, 1.1679, 1.0218],
                      [-6.5716, -0.8414, -8.1646],[-6.1061, 12.7945, 7.2201],
                      [13.0884, 7.5387, 19.2231],[70.7187, 7.6138, 74.6949]];

				wb2 =[[4.674, 1.4481, -1.5131, 0.0461, -0.1427, 2.5454, -6.7991, -0.5948, -1.6361, 0.5801, -3.0336],
                      [-6.7171, -0.7737, -5.6596, 2.975, 14.6248, 2.7266, 5.5043, -13.2659, -0.7158, 3.076, 15.9058],
                      [7.0753, -3.0128, -1.1779, -6.445, -1.1517, 7.3248, 24.7022, -0.373, 4.2665, -7.8302, -3.1938],
                      [2.5847, -12.1313, 21.3347, 1.2881,	-0.2724, -1.0393, -19.1914, -0.263, -3.2677, -12.4085, -10.2058],
                      [-19.8404, 4.8606,	0.3891,	-4.5608, -0.9258, -7.3852, 18.6507, 0.0403,	-6.3956, -0.9853, 13.5862],
                      [16.7482, -3.8389, -1.2688, 1.9843,	-0.1401, -8.9383, -30.8856, -1.5505, -4.7172, 10.5566, 8.2966],
                      [2.4256, 2.1989,	18.8572, -14.5366, 11.64, -19.3502, 26.6786, -8.9867, -13.9055,	5.195, 9.7723],
                      [-16.388, 12.1992, -2.2401, -4.0366, -0.368, -6.9203, -17.8283, -0.0244, 9.3962, -1.7107, -1.0572],
                      [14.6257, 7.5518,	12.6715, -12.7354, 10.6586, -43.1601, 1.3387, -16.3876, 8.5277,	45.9331, -6.6981],
                      [-6.9243, 0.6229,	1.6542,	-0.6833, 1.3122, -5.588,	-23.4508, 0.5679, 1.7561, -3.1352, 5.8675]];
                      
				wb3 =[-30.1311, 2.0902, -3.5296, 18.1108, -2.528, -0.7228, 0.0186, 5.3507, -0.1476, -5.0827, 3.9767];
				
				var n1_10 = [];
			    var n2_10 = [];
			    Ppr_n = 2 / (Ppr_max - Ppr_min) * (Ppr - Ppr_min) - 1
			    Tpr_n = 2 / (Tpr_max - Tpr_min) * (Tpr - Tpr_min) - 1
				
			    for(var i=0; i<10; i++) {
				    n1_10.push([0, 0]);
			        n1_10[i][0] = Ppr_n * wb1[i][0] + Tpr_n * wb1[i][1] + wb1[i][2];
			        n1_10[i][1] =  (1 / (1 + Math.exp(-1 * n1_10[i][0])));	
			    }
		        
				for(var i=0; i<10; i++){
					n2_10.push([0, 0]);
					
					for(var j=0; j<10;j++){
						n2_10[i][0] += n1_10[j][1] * wb2[i][j];
					}
					
				    n2_10[i][0] += wb2[i][10];
				    n2_10[i][1] = (1 / (1 + Math.exp(-1 * n2_10[i][0])));
					
				}

			    z_n = 0
			    for(var j=0; j<n2_10.length; j++){
			    	
			    	z_n += n2_10[j][1] * wb3[j];
			    }
			    
			    z_n += wb3[10];
			    
			   return ((z_n + 1) * (Z_max - Z_min) / 2 + Z_min).toFixed(4);
			}
			
			
			function z_DranchukAbuKassem(Ppr, Tpr) {
				A1 = 0.3265, A2 = -1.07, A3 = -0.5399, A4 = 0.01569, A5 = -0.05165,
				A6 = 0.5475, A7 = -0.7361, A8 = 0.1844, A9 = 0.1056, A10 = 0.6134,
				A11 = 0.721; 
				R1 = A1 + A2/Tpr + A3/Tpr**3 + A4/Tpr**4 + A5/Tpr**5;
				R2 = 0.27*Ppr / Tpr;
				R3 = A6 + A7/Tpr + A8/Tpr**2;
				R4 = A9 + (A7/Tpr + A8/Tpr**2);
				R5 = A10/Tpr**3;
				
				tolerance = 10e-5;
				z_old = 1
				rho = 0.27*Ppr / (z_old*Tpr);
				
				while (true) {
					z_new = R1*rho - R2/rho + R3*rho**2 - R4*rho**5 + R5*rho**2*(1+A11*rho**2)*Math.exp(-A11*rho**2) + 1;
					z_new_prime = R1 + R2/rho**2 + 2*R3*rho - 5*R4*rho**4 + 2*R5*rho*Math.exp(-A11*rho**2)*((1+2*A11*rho**3)-A11*rho**2*(1+A11*rho**2));
					
					if (Math.abs(z_new) < tolerance) {
						break
					} else {
						rho1 = rho - z_new / z_new_prime
					}
					
					if (Math.abs(rho1 - rho) < tolerance) {
						break
					} else {
						rho = rho1
					}
					
				}
				
				return (0.27 * Ppr / (rho * Tpr)).toFixed(4);
			
				
			}
			
			function z_BeggsBrill(Ppr, Tpr) {
				A = 1.39*(Tpr-0.92)**0.5 - 0.36*Tpr - 0.101;
				B = (0.62 - 0.23*Tpr)*Ppr + (0.066/(Tpr-0.86)-0.037)*Ppr**2 + 0.32*Ppr**6/10**(9*(Tpr-1));
				C = 0.132 - 0.32*Math.log10(Tpr);
				D = 10**(0.3106 - 0.49*Tpr + 0.1824*Tpr**2);
				return (A + (1-A)/Math.exp(B) + C*Ppr**D).toFixed(4);
				
			}
			
			function z_HallYarborough(Ppr, Tpr) {
				tolerance = 10e-5;
				Tpr_inv = 1/Tpr;
				y0 = 0;
				A = 0.06125*Tpr_inv*Math.exp(-1.2*(1-Tpr_inv)**2);
				B = Tpr_inv*(14.76 - 9.76*Tpr_inv + 4.58*Tpr_inv**2);
				C = Tpr_inv*(90.7 - 242.2*Tpr_inv + 42.4*Tpr_inv**2);
				D = 2.18 + 2.82*Tpr_inv;
				
				function f(y,A,B,C,D,Ppr){
					return (y + y**2 + y**3 - y**4) / (1 - y)**3 - A*Ppr - B*y**2 + C*y**D;
				}
				function f_prime(y,A,B,C,D){
					return (1 + 4*y + 4*y**2 - 4*y**3 + y**4)/(1-y)**4 - 2*B*y + C*D*y**(D-1);
				}
				
				while (true) {
					y = y0 - f(y0,A,B,C,D,Ppr)/f_prime(y0,A,B,C,D);
					if (Math.abs(y-y0) < tolerance){
						break
					} else {
						y0 = y;
					}
				}
				
				
				return (A*Ppr/y).toFixed(4);
			
			}
			
			
			function z_Shell(Ppr, Tpr) {
				A = -0.101 - 0.36*Tpr + 1.3868*(Tpr-0.919)**0.5;
				B = 0.021 + 0.04275/(Tpr - 0.65);
				D = 0.122 * Math.exp(-11.3*(Tpr-1));
				E = 0.6222 - 0.224*Tpr;
				z_corrected = 0.0657/(Tpr-0.85) - 0.037;
				G = 0.32*Math.exp(-19.53*(Tpr-1));
				C = Ppr*(E + z_corrected*Ppr + G*Ppr**4);
				
				return (A + B*Ppr + (1-A)*Math.exp(-C) - D*(Ppr/10)**4).toFixed(4);
			
			}
			
			function z_DranchukPurvisRobinson(Ppr, Tpr) {
				function f(rho){
					return (1 + T1*rho + T2*rho**2 + T3*rho**5 + (T4*rho**2*(1+A8*rho**2)*Math.exp(-A8*rho**2)) - T5/rho) 
				}
				function f_prime(rho){
					return (T1 + 2*T2*rho + 5*T3*rho**4 + 2*T4*rho*Math.exp(-A8*rho**2)*((1+2*A8*rho**2) - A8*rho**2*(1+A8*rho**2)) + T5/rho**2)
					
				}
				
				A1 = 0.31506237
			    A2 = -1.0467099
			    A3 = -0.57832720
			    A4 =  0.53530771
			    A5 = -0.61232032
			    A6 = -0.10488813
			    A7 = 0.68157001
			    A8 = 0.68446549
			    T1 = A1 + A2/Tpr + A3/Tpr**3;
			    T2 = A4 + A5/Tpr;
			    T3 = A5 + A6/Tpr;
			    T4 = A7/Tpr**3;
			    T5 = 0.27*Ppr/Tpr;
			    
			    rho = 0.27*Ppr/Tpr;
			    tolerance = 10e-5;
			    
			    while (true) {
					if (Math.abs(f(rho)) < tolerance) {
						break
					} else {
						rho1 = rho - f(rho) / f_prime(rho)
					}
					
					if (Math.abs(rho1 - rho) < tolerance) {
						break
					} else {
						rho = rho1
					}
					
				}
				
				return (0.27 * Ppr / (rho * Tpr)).toFixed(4);
				
			}
			
		
		var z_Kamyab = z_Kamyab(Ppr, Tpr);
		var z_BeggsBrill = z_BeggsBrill(Ppr, Tpr);
		var z_DranchukAbuKassem = z_DranchukAbuKassem(Ppr, Tpr);
		var z_Shell = z_Shell(Ppr, Tpr);
		var z_HallYarborough = z_HallYarborough(Ppr, Tpr);
		var z_DranchukPurvisRobinson = z_DranchukPurvisRobinson(Ppr, Tpr);
		
		var trace1 = {
			x: [Ppr],
			y: [z_Kamyab],
			mode: 'markers',
			type: 'scatter',
			name: 'Kamyab',
			marker: {size: 12}
		};
		var trace2= {
			x: [Ppr],
			y: [z_BeggsBrill],
			mode: 'markers',
			type: 'scatter',
			name: 'BeggsBrill',
			marker: {size: 12}
		};
	
		var trace3 = {
			x: [Ppr],
			y: [z_DranchukAbuKassem],
			mode: 'markers',
			type: 'scatter',
			name: 'DranchukAbuKassem',
			marker: {size: 12}
		};
		var trace4 = {
			x: [Ppr],
			y: [z_HallYarborough],
			mode: 'markers',
			type: 'scatter',
			name: 'HallYarborough',
			marker: {size: 12}
		};
		var trace5 = {
			x: [Ppr],
			y: [z_Shell],
			mode: 'markers',
			type: 'scatter',
			name: 'Shell',
			marker: {size: 12}
		};
		// var trace6 = {
		// 	x: [Ppr],
		// 	y: [z_DranchukPurvisRobinson],
		// 	mode: 'markers',
		// 	type: 'scatter',
		// 	name: 'DranchukPurvisRobinson',
		// 	marker: {size: 12}
		// };
		
		var data = [trace1, trace2, trace3, trace4, trace5];
		
		var layout = {
			title: 'z Factor',
			xaxis :{
				title: 'Pseudopressure - Ppr',
				showgrid: true
			},
			yaxis :{
				title: 'Gas compressibility -z'
			}
		};
		
		Plotly.newPlot('plot', data, layout);	
			
		}) // button addEventListener
		
		// z for all correlations:
		
		
						
	</script>


<% include ../partials/footer %>
